{"/home/travis/build/npmtest/node-npmtest-socket.io-stream/test.js":"/* istanbul instrument in package npmtest_socket_io_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-socket.io-stream/lib.npmtest_socket.io_stream.js":"/* istanbul instrument in package npmtest_socket_io_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_socket_io_stream = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_socket_io_stream = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-socket.io-stream/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-socket.io-stream && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_socket_io_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_socket_io_stream\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_socket_io_stream.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_socket_io_stream.rollup.js'] =\n            local.assetsDict['/assets.npmtest_socket_io_stream.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_socket_io_stream.__dirname +\n                    '/lib.npmtest_socket_io_stream.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-socket.io-stream/socket.io-stream/index.js":"\nmodule.exports = require('./lib');\n\n","/home/travis/build/npmtest/node-npmtest-socket.io-stream/socket.io-stream/lib/index.js":"var Socket = require('./socket');\nvar IOStream = require('./iostream');\nvar BlobReadStream = require('./blob-read-stream');\n\n\nexports = module.exports = lookup;\n\n/**\n * Expose Node Buffer for browser.\n *\n * @api public\n */\nexports.Buffer = Buffer;\n\n/**\n * Expose Socket constructor.\n *\n * @api public\n */\nexports.Socket = Socket;\n\n/**\n * Expose IOStream constructor.\n *\n * @api public\n */\nexports.IOStream = IOStream;\n\n/**\n * Forces base 64 encoding when emitting. Must be set to true for Socket.IO v0.9 or lower.\n *\n * @api public\n */\nexports.forceBase64 = false;\n\n/**\n * Look up an existing Socket.\n *\n * @param {socket.io#Socket} socket.io\n * @param {Object} options\n * @return {Socket} Socket instance\n * @api public\n */\nfunction lookup(sio, options) {\n  options = options || {};\n  if (null == options.forceBase64) {\n    options.forceBase64 = exports.forceBase64;\n  }\n\n  if (!sio._streamSocket) {\n    sio._streamSocket = new Socket(sio, options);\n  }\n  return sio._streamSocket;\n}\n\n/**\n * Creates a new duplex stream.\n *\n * @param {Object} options\n * @return {IOStream} duplex stream\n * @api public\n */\nexports.createStream = function(options) {\n  return new IOStream(options);\n};\n\n/**\n * Creates a new readable stream for Blob/File on browser.\n *\n * @param {Blob} blob\n * @param {Object} options\n * @return {BlobReadStream} stream\n * @api public\n */\nexports.createBlobReadStream = function(blob, options) {\n  return new BlobReadStream(blob, options);\n};\n","/home/travis/build/npmtest/node-npmtest-socket.io-stream/socket.io-stream/lib/socket.js":"var util = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar bind = require('component-bind');\nvar IOStream = require('./iostream');\nvar parser = require('./parser');\nvar debug = require('debug')('socket.io-stream:socket');\nvar emit = EventEmitter.prototype.emit;\nvar on = EventEmitter.prototype.on;\nvar slice = Array.prototype.slice;\n\n\nexports = module.exports = Socket;\n\n/**\n * Base event name for messaging.\n *\n * @api public\n */\nexports.event = '$stream';\n\nexports.events = [\n  'error',\n  'newListener',\n  'removeListener'\n];\n\nutil.inherits(Socket, EventEmitter);\n\n/**\n * Bidirectional stream socket which wraps Socket.IO.\n *\n * @param {socket.io#Socket} socket.io\n * @api public\n */\nfunction Socket(sio, options) {\n  if (!(this instanceof Socket)) {\n    return new Socket(sio, options);\n  }\n\n  EventEmitter.call(this);\n\n  options = options || {};\n\n  this.sio = sio;\n  this.forceBase64 = !!options.forceBase64;\n  this.streams = {};\n  this.encoder = new parser.Encoder();\n  this.decoder = new parser.Decoder();\n\n  var eventName = exports.event;\n  sio.on(eventName, bind(this, emit));\n  sio.on(eventName + '-read', bind(this, '_onread'));\n  sio.on(eventName + '-write', bind(this, '_onwrite'));\n  sio.on(eventName + '-end', bind(this, '_onend'));\n  sio.on(eventName + '-error', bind(this, '_onerror'));\n  sio.on('error', bind(this, emit, 'error'));\n  sio.on('disconnect', bind(this, '_ondisconnect'));\n\n  this.encoder.on('stream', bind(this, '_onencode'));\n  this.decoder.on('stream', bind(this, '_ondecode'));\n}\n\n/**\n * Original emit function.\n *\n * @api private\n */\nSocket.prototype.$emit = emit;\n\n/**\n * Emits streams to this corresponding server/client.\n *\n * @return {Socket} self\n * @api public\n */\nSocket.prototype.emit = function(type) {\n  if (~exports.events.indexOf(type)) {\n    return emit.apply(this, arguments);\n  }\n  this._stream.apply(this, arguments);\n  return this;\n};\n\nSocket.prototype.on = function(type, listener) {\n  if (~exports.events.indexOf(type)) {\n    return on.apply(this, arguments);\n  }\n\n  this._onstream(type, listener);\n  return this;\n};\n\n/**\n * Sends a new stream request.\n *\n * @param {String} event type\n * @api private\n */\nSocket.prototype._stream = function(type) {\n  debug('sending new streams');\n\n  var self = this;\n  var args = slice.call(arguments, 1);\n  var ack = args[args.length - 1];\n  if ('function' == typeof ack) {\n    args[args.length - 1] = function() {\n      var args = slice.call(arguments);\n      args = self.decoder.decode(args);\n      ack.apply(this, args);\n    };\n  }\n\n  args = this.encoder.encode(args);\n  var sio = this.sio;\n  sio.emit.apply(sio, [exports.event, type].concat(args));\n};\n\n/**\n * Notifies the read event.\n *\n * @api private\n */\nSocket.prototype._read = function(id, size) {\n  this.sio.emit(exports.event + '-read', id, size);\n};\n\n/**\n * Requests to write a chunk.\n *\n * @api private\n */\nSocket.prototype._write = function(id, chunk, encoding, callback) {\n  if (Buffer.isBuffer(chunk)) {\n    if (this.forceBase64) {\n      encoding = 'base64';\n      chunk = chunk.toString(encoding);\n    } else if (!global.Buffer) {\n      // socket.io can't handle Buffer when using browserify.\n      if (chunk.toArrayBuffer) {\n        chunk = chunk.toArrayBuffer();\n      } else {\n        chunk = chunk.buffer;\n      }\n    }\n  }\n  this.sio.emit(exports.event + '-write', id, chunk, encoding, callback);\n};\n\nSocket.prototype._end = function(id) {\n  this.sio.emit(exports.event + '-end', id);\n};\n\nSocket.prototype._error = function(id, err) {\n  this.sio.emit(exports.event + '-error', id, err.message || err);\n};\n\n/**\n * Handles a new stream request.\n *\n * @param {String} event type\n * @param {Function} listener\n *\n * @api private\n */\nSocket.prototype._onstream = function(type, listener) {\n  if ('function' != typeof listener) {\n    throw TypeError('listener must be a function');\n  }\n\n  function onstream() {\n    debug('new streams');\n    var self = this;\n    var args = slice.call(arguments);\n    var ack = args[args.length - 1];\n    if ('function' == typeof ack) {\n      args[args.length - 1] = function() {\n        var args = slice.call(arguments);\n        args = self.encoder.encode(args);\n        ack.apply(this, args);\n      };\n    }\n\n    args = this.decoder.decode(args);\n    listener.apply(this, args);\n  }\n\n  // for removeListener\n  onstream.listener = listener;\n\n  on.call(this, type, onstream);\n};\n\nSocket.prototype._onread = function(id, size) {\n  debug('read: \"%s\"', id);\n\n  var stream = this.streams[id];\n  if (stream) {\n    stream._onread(size);\n  } else {\n    debug('ignore invalid stream id');\n  }\n};\n\nSocket.prototype._onwrite = function(id, chunk, encoding, callback) {\n  debug('write: \"%s\"', id);\n\n  var stream = this.streams[id];\n  if (!stream) {\n    callback('invalid stream id: ' + id);\n    return;\n  }\n\n  if (global.ArrayBuffer && chunk instanceof ArrayBuffer) {\n    // make sure that chunk is a buffer for stream\n    chunk = new Buffer(new Uint8Array(chunk));\n  }\n  stream._onwrite(chunk, encoding, callback);\n};\n\nSocket.prototype._onend = function(id) {\n  debug('end: \"%s\"', id);\n\n  var stream = this.streams[id];\n  if (!stream) {\n    debug('ignore non-existent stream id: \"%s\"', id);\n    return;\n  }\n\n  stream._end();\n};\n\nSocket.prototype._onerror = function(id, message) {\n  debug('error: \"%s\", \"%s\"', id, message);\n\n  var stream = this.streams[id];\n  if (!stream) {\n    debug('invalid stream id: \"%s\"', id);\n    return;\n  }\n\n  var err = new Error(message);\n  err.remote = true;\n  stream.emit('error', err);\n};\n\nSocket.prototype._ondisconnect = function() {\n  var stream;\n  for (var id in this.streams) {\n    stream = this.streams[id];\n    stream.destroy();\n\n    // Close streams when the underlaying\n    // socket.io connection is closed (regardless why)\n    stream.emit('close');\n    stream.emit('error', new Error('Connection aborted'));\n  }\n};\n\nSocket.prototype._onencode = function(stream) {\n  if (stream.socket || stream.destroyed) {\n    throw new Error('stream has already been sent.');\n  }\n\n  var id = stream.id;\n  if (this.streams[id]) {\n    throw new Error('Encoded stream already exists: ' + id);\n  }\n\n  this.streams[id] = stream;\n  stream.socket = this;\n};\n\nSocket.prototype._ondecode = function(stream) {\n  var id = stream.id;\n  if (this.streams[id]) {\n    this._error(id, new Error('Decoded stream already exists: ' + id));\n    return;\n  }\n\n  this.streams[id] = stream;\n  stream.socket = this;\n};\n\nSocket.prototype.cleanup = function(id) {\n  delete this.streams[id];\n};\n\n","/home/travis/build/npmtest/node-npmtest-socket.io-stream/socket.io-stream/lib/iostream.js":"var util = require('util');\nvar Duplex = require('stream').Duplex;\nvar bind = require('component-bind');\nvar uuid = require('./uuid');\nvar debug = require('debug')('socket.io-stream:iostream');\n\n\nmodule.exports = IOStream;\n\nutil.inherits(IOStream, Duplex);\n\n/**\n * Duplex\n *\n * @param {Object} options\n * @api private\n */\nfunction IOStream(options) {\n  if (!(this instanceof IOStream)) {\n    return new IOStream(options);\n  }\n\n  IOStream.super_.call(this, options);\n\n  this.options = options;\n  this.id = uuid();\n  this.socket = null;\n\n  // Buffers\n  this.pushBuffer = [];\n  this.writeBuffer = [];\n\n  // Op states\n  this._readable = false;\n  this._writable = false;\n  this.destroyed = false;\n\n  // default to *not* allowing half open sockets\n  this.allowHalfOpen = options && options.allowHalfOpen || false;\n\n  this.on('finish', this._onfinish);\n  this.on('end', this._onend);\n  this.on('error', this._onerror);\n}\n\n/**\n * Ensures that no more I/O activity happens on this stream.\n * Not necessary in the usual case.\n *\n * @api public\n */\nIOStream.prototype.destroy = function() {\n  debug('destroy');\n\n  if (this.destroyed) {\n    debug('already destroyed');\n    return;\n  }\n\n  this.readable = this.writable = false;\n\n  if (this.socket) {\n    debug('clean up');\n    this.socket.cleanup(this.id);\n    this.socket = null;\n  }\n\n  this.destroyed = true;\n};\n\n/**\n * Local read\n *\n * @api private\n */\nIOStream.prototype._read = function(size) {\n  var push;\n\n  // We can not read from the socket if it's destroyed obviously ...\n  if (this.destroyed) return;\n\n  if (this.pushBuffer.length) {\n    // flush buffer and end if it exists.\n    while (push = this.pushBuffer.shift()) {\n      if (!push()) break;\n    }\n    return;\n  }\n\n  this._readable = true;\n\n  // Go get data from remote stream\n  // Calls\n  // ._onread remotely\n  // then\n  // ._onwrite locally\n  this.socket._read(this.id, size);\n};\n\n\n/**\n * Read from remote stream\n *\n * @api private\n */\nIOStream.prototype._onread = function(size) {\n  var write = this.writeBuffer.shift();\n  if (write) return write();\n\n  this._writable = true;\n};\n\n/**\n * Write local data to remote stream\n * Calls\n * remtote ._onwrite\n *\n * @api private\n */\nIOStream.prototype._write = function(chunk, encoding, callback) {\n  var self = this;\n\n  function write() {\n    // We can not write to the socket if it's destroyed obviously ...\n    if (self.destroyed) return;\n\n    self._writable = false;\n    self.socket._write(self.id, chunk, encoding, callback);\n  }\n\n  if (this._writable) {\n    write();\n  } else {\n    this.writeBuffer.push(write);\n  }\n};\n\n/**\n * Write the data fetched remotely\n * so that we can now read locally\n *\n * @api private\n */\nIOStream.prototype._onwrite = function(chunk, encoding, callback) {\n  var self = this;\n\n  function push() {\n    self._readable = false;\n    var ret = self.push(chunk || '', encoding);\n    callback();\n    return ret;\n  }\n\n  if (this._readable) {\n    push();\n  } else {\n    this.pushBuffer.push(push);\n  }\n};\n\n/**\n * When ending send 'end' event to remote stream\n *\n * @api private\n */\nIOStream.prototype._end = function() {\n  if (this.pushBuffer.length) {\n    // end after flushing buffer.\n    this.pushBuffer.push(bind(this, '_done'));\n  } else {\n    this._done();\n  }\n};\n\n/**\n * Remote stream just ended\n *\n * @api private\n */\nIOStream.prototype._done = function() {\n  this._readable = false;\n\n  // signal the end of the data.\n  return this.push(null);\n};\n\n/**\n * the user has called .end(), and all the bytes have been\n * sent out to the other side.\n * If allowHalfOpen is false, or if the readable side has\n * ended already, then destroy.\n * If allowHalfOpen is true, then we need to set writable false,\n * so that only the writable side will be cleaned up.\n *\n * @api private\n */\nIOStream.prototype._onfinish = function() {\n  debug('_onfinish');\n  // Local socket just finished\n  // send 'end' event to remote\n  if (this.socket) {\n    this.socket._end(this.id);\n  }\n\n  this.writable = false;\n  this._writableState.ended = true;\n\n  if (!this.readable || this._readableState.ended) {\n    debug('_onfinish: ended, destroy %s', this._readableState);\n    return this.destroy();\n  }\n\n  debug('_onfinish: not ended');\n\n  if (!this.allowHalfOpen) {\n    this.push(null);\n\n    // just in case we're waiting for an EOF.\n    if (this.readable && !this._readableState.endEmitted) {\n      this.read(0);\n    }\n  }\n};\n\n/**\n * the EOF has been received, and no more bytes are coming.\n * if the writable side has ended already, then clean everything\n * up.\n *\n * @api private\n */\nIOStream.prototype._onend = function() {\n  debug('_onend');\n  this.readable = false;\n  this._readableState.ended = true;\n\n  if (!this.writable || this._writableState.finished) {\n    debug('_onend: %s', this._writableState);\n    return this.destroy();\n  }\n\n  debug('_onend: not finished');\n\n  if (!this.allowHalfOpen) {\n    this.end();\n  }\n};\n\n/**\n * When error in local stream\n * notyify remote\n * if err.remote = true\n * then error happened on remote stream\n *\n * @api private\n */\nIOStream.prototype._onerror = function(err) {\n  // check if the error came from remote stream.\n  if (!err.remote && this.socket) {\n    // notify the error to the corresponding remote stream.\n    this.socket._error(this.id, err);\n  }\n\n  this.destroy();\n};\n","/home/travis/build/npmtest/node-npmtest-socket.io-stream/socket.io-stream/lib/uuid.js":"// UUID function from https://gist.github.com/jed/982883\n// More lightweight than node-uuid\nfunction b(\n  a                  // placeholder\n){\n  return a           // if the placeholder was passed, return\n    ? (              // a random number from 0 to 15\n      a ^            // unless b is 8,\n      Math.random()  // in which case\n      * 16           // a random number from\n      >> a/4         // 8 to 11\n      ).toString(16) // in hexadecimal\n    : (              // or otherwise a concatenated string:\n      [1e7] +        // 10000000 +\n      -1e3 +         // -1000 +\n      -4e3 +         // -4000 +\n      -8e3 +         // -80000000 +\n      -1e11          // -100000000000,\n      ).replace(     // replacing\n        /[018]/g,    // zeroes, ones, and eights with\n        b            // random hex digits\n      )\n}\n\nmodule.exports = b;\n","/home/travis/build/npmtest/node-npmtest-socket.io-stream/socket.io-stream/lib/parser.js":"var util = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar IOStream = require('./iostream');\nvar slice = Array.prototype.slice;\n\nexports.Encoder = Encoder;\nexports.Decoder = Decoder;\n\nutil.inherits(Encoder, EventEmitter);\n\nfunction Encoder() {\n  EventEmitter.call(this);\n}\n\n/**\n * Encode streams to placeholder objects.\n *\n * @api public\n */\nEncoder.prototype.encode = function(v) {\n  if (v instanceof IOStream) {\n    return this.encodeStream(v);\n  } else if (util.isArray(v)) {\n    return this.encodeArray(v);\n  } else if (v && 'object' == typeof v) {\n    return this.encodeObject(v);\n  }\n  return v;\n}\n\nEncoder.prototype.encodeStream = function(stream) {\n  this.emit('stream', stream);\n\n  // represent a stream in an object.\n  var v = { $stream: stream.id };\n  if (stream.options) {\n    v.options = stream.options;\n  }\n  return v;\n}\n\nEncoder.prototype.encodeArray = function(arr) {\n  var v = [];\n  for (var i = 0, len = arr.length; i < len; i++) {\n    v.push(this.encode(arr[i]));\n  }\n  return v;\n}\n\nEncoder.prototype.encodeObject = function(obj) {\n  var v = {};\n  for (var k in obj) {\n    if (obj.hasOwnProperty(k)) {\n      v[k] = this.encode(obj[k]);\n    }\n  }\n  return v;\n}\n\nutil.inherits(Decoder, EventEmitter);\n\nfunction Decoder() {\n  EventEmitter.call(this);\n}\n\n/**\n * Decode placeholder objects to streams.\n *\n * @api public\n */\nDecoder.prototype.decode = function(v) {\n  if (v && v.$stream) {\n    return this.decodeStream(v);\n  } else if (util.isArray(v)) {\n    return this.decodeArray(v);\n  } else if (v && 'object' == typeof v) {\n    return this.decodeObject(v);\n  }\n  return v;\n}\n\nDecoder.prototype.decodeStream = function(obj) {\n  var stream = new IOStream(obj.options);\n  stream.id = obj.$stream;\n  this.emit('stream', stream);\n  return stream;\n}\n\nDecoder.prototype.decodeArray = function(arr) {\n  var v = [];\n  for (var i = 0, len = arr.length; i < len; i++) {\n    v.push(this.decode(arr[i]));\n  }\n  return v;\n}\n\nDecoder.prototype.decodeObject = function(obj) {\n  var v = {};\n  for (var k in obj) {\n    if (obj.hasOwnProperty(k)) {\n      v[k] = this.decode(obj[k]);\n    }\n  }\n  return v;\n}\n","/home/travis/build/npmtest/node-npmtest-socket.io-stream/socket.io-stream/lib/blob-read-stream.js":"var util = require('util');\nvar Readable = require('stream').Readable;\nvar bind = require('component-bind');\n\n\nmodule.exports = BlobReadStream;\n\nutil.inherits(BlobReadStream, Readable);\n\n/**\n * Readable stream for Blob and File on browser.\n *\n * @param {Object} options\n * @api private\n */\nfunction BlobReadStream(blob, options) {\n  if (!(this instanceof BlobReadStream)) {\n    return new BlobReadStream(blob, options);\n  }\n\n  Readable.call(this, options);\n\n  options = options || {};\n  this.blob = blob;\n  this.slice = blob.slice || blob.webkitSlice || blob.mozSlice;\n  this.start = 0;\n  this.sync = options.synchronous || false;\n\n  var fileReader;\n\n  if (options.synchronous) {\n    fileReader = this.fileReader = new FileReaderSync();\n  } else {\n    fileReader = this.fileReader = new FileReader();\n  }\n\n  fileReader.onload = bind(this, '_onload');\n  fileReader.onerror = bind(this, '_onerror');\n}\n\nBlobReadStream.prototype._read = function(size) {\n  var start = this.start;\n  var end = this.start = this.start + size;\n  var chunk = this.slice.call(this.blob, start, end);\n\n  if (chunk.size) {\n    if (this.sync) {\n      var bufferChunk = new Buffer(new Uint8Array(this.fileReader.readAsArrayBuffer(chunk)));\n      this.push(bufferChunk);\n    } else {\n      this.fileReader.readAsArrayBuffer(chunk);\n    }\n  } else {\n    this.push(null);\n  }\n}\n\nBlobReadStream.prototype._onload = function(e) {\n  var chunk = new Buffer(new Uint8Array(e.target.result));\n  this.push(chunk);\n};\n\nBlobReadStream.prototype._onerror = function(e) {\n  var err = e.target.error;\n  this.emit('error', err);\n};\n\n"}